diff -u a/gist.el b/gist.el
--- a/gist.el
+++ b/gist.el
@@ -745,7 +745,10 @@
         (gh-url-add-response-callback
          resp
          (lambda (gist)
-           (set-buffer-modified-p nil)
+           ;; if this buffer is belong to a file, let save it too
+           (if (buffer-file-name)
+               (save-buffer)
+             (set-buffer-modified-p nil))
            (when new-name
              (rename-buffer (replace-regexp-in-string "/.*$"
                                                       (concat "/" new-name)
@@ -763,6 +766,33 @@
   (let ((new-name (read-from-minibuffer "File name: " gist-filename)))
     (gist-mode-edit-buffer new-name)))
 
+(defun gist-pull(&optional id filename buffer)
+  "Update BUFFER from gist base on ID and FILENAME.
+BUFFER is default to current buffer if not specified."
+  (interactive)
+  (let* ((id (or id gist-id))
+         (filename (or filename gist-filename))
+         (gist (gist-list-db-get-gist id)))
+    (when (or (null id) (null filename))
+      (error "gist-id and gist-filename must be set"))
+    (let ((api (gist-get-api t)))
+      (cond ((null gist)
+             ;; fetch it
+             (setq gist (oref (gh-gist-get api id) :data))
+             (puthash (oref gist :id) gist gist-list-db)
+             (let* ((user (oref gist :user))
+                    (gists (push gist (gethash user gist-list-db-by-user))))
+               (puthash user gists gist-list-db-by-user)))
+            (t (gh-gist-get api gist))))
+    (let ((files (oref gist :files)))
+      (dolist (f files)
+        (when (equal (oref f :filename) filename)
+          (with-current-buffer (or buffer (current-buffer))
+            (delete-region (point-min) (point-max))
+            (insert (oref f :content))
+            (set-buffer-modified-p nil)
+            (switch-to-buffer (current-buffer))))))))
+
 (defvar gist-mode-map
   (let ((map (make-sparse-keymap)))
     (define-key map [remap save-buffer] 'gist-mode-save-buffer)

Diff finished.  Sun Aug  6 15:41:09 2023
